from pwn import *
from Crypto.Util.strxor import strxor
import time

# Configura qui
HOST = "130.192.5.212"
PORT = 6562
FLAG_LEN = 64  # lunghezza stimata massima della flag
KNOWN_PLAINTEXT = b'A' * FLAG_LEN

# Connessione al servizio
conn = remote(HOST, PORT)

# Sincronizzarsi all'inizio del secondo
def sync_second():
    while True:
        now = time.time()
        if now - int(now) < 0.05:  # inizio del secondo
            break
        time.sleep(0.01)

# Attendi l'inizio del secondo per generare lo stesso nonce
sync_second()

# Invia plaintext controllato
conn.sendlineafter(b'Want to encrypt? (y/n/f)', b'y')
conn.sendlineafter(b'> ', KNOWN_PLAINTEXT)
cipher_known = bytes.fromhex(conn.recvline().strip().decode())

# Subito dopo, richiedi cifratura della flag
conn.sendlineafter(b'Want to encrypt something else? (y/n/f)', b'f')
cipher_flag = bytes.fromhex(conn.recvline().strip().decode())

# Estrai il keystream
min_len = min(len(cipher_known), len(cipher_flag))
keystream = strxor(cipher_known[:min_len], KNOWN_PLAINTEXT[:min_len])

# Decripta la flag (fino alla lunghezza del keystream)
flag = strxor(cipher_flag[:min_len], keystream)
print("[+] FLAG:", flag.decode(errors='ignore'))
