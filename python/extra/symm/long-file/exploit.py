import re
import string

# Percorso del file cifrato
cipher_file = "file.enc"

# Inizio noto della flag
known_flag_start = b"CRYPTO25{"
printable_bytes = set(bytes(string.printable, 'ascii'))

# Lunghezza del keystream usato nella cifratura
KEYSTREAM_SIZE = 1000

def recover_keystream(cipher_data, known_plaintext):
    keystream = bytearray([c ^ p for c, p in zip(cipher_data[:len(known_plaintext)], known_plaintext)])

    for i in range(len(keystream), KEYSTREAM_SIZE):
        c = cipher_data[i]
        for k in range(256):
            if (c ^ k) in printable_bytes:
                keystream.append(k)
                break
        else:
            keystream.append(0x00)  # fallback
    return keystream

def decrypt(cipher_data, keystream):
    full_keystream = (keystream * ((len(cipher_data) // len(keystream)) + 1))[:len(cipher_data)]
    return bytes([c ^ k for c, k in zip(cipher_data, full_keystream)])

def extract_flag(text):
    match = re.search(rb'CRYPTO25\{[^}]+\}', text)
    return match.group(0).decode() if match else None

def main():
    with open(cipher_file, "rb") as f:
        cipher_data = f.read()

    keystream = recover_keystream(cipher_data, known_flag_start)
    plaintext = decrypt(cipher_data, keystream)
    flag = extract_flag(plaintext)

    if flag:
        print(f"[+] Flag trovata: {flag}")
    else:
        print("[-] Flag non trovata.")

if __name__ == "__main__":
    main()
