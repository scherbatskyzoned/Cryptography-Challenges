from gmpy2 import isqrt
from Crypto.Util.number import inverse, long_to_bytes

n = 60509355275518728792864353034381323203712352065221533863094540755630035742080855136016830887120470658395455751858380183285852786807229077435165810022519265154399424311072791755790585544921699474779996198610853766677088209156457859301755313246598035577293799853256065979074343370064111263698164125580000165237
ct = 44695558076372490838321125335259117268430036823123326565653896322404966549742986308988778274388721345811255801305658387179978736924822440382730114598169989281210266972874387657989210875921956705640740514819089546339431934001119998309992280196600672180116219966257003764871670107271245284636072817194316693323
e = 65537


a = b = isqrt(n)
b2 = pow(a, 2) - n


i = 0
while True:
    print(f"Iteration #{i}")
    if (b2 == pow(b, 2)):
        print("Solution found")
        break
    else:
        a += 1
        b2 = pow(a, 2) - n
        b = isqrt(b2)
    i += 1

p = a + b
q = a - b

phi = (p-1)*(q-1)
d = inverse(e, phi)

pt = pow(ct, d, n)

pt_printable = long_to_bytes(pt)
print(pt_printable)