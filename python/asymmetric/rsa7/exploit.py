from pwn import *
from Crypto.Util.number import long_to_bytes

def print_bounds(lower_bound, upper_bound):
    print(f"Lower bound: {lower_bound}")
    print(f"Upper bound: {upper_bound}")


HOST = "130.192.5.212" 
PORT = 6647

e = 65537

conn = remote(HOST, PORT)

n = int(conn.recvline().decode().strip())
c = int(conn.recvline().decode().strip())

two_pow_e = pow(2, e, n)
low = 0
high = n
m = c

# Run for as many bits as in n
for i in range(n.bit_length()):
    # Multiply c by 2^e mod n to simulate m * 2^i
    m = (pow(2, e, n) * m) % n
    conn.sendline(str(m).encode())      # Send ciphertext
    bit = conn.recvline().strip().decode()  # Receive LSB: 0 or 1
    print(bit)
    # Binary search narrowing
    mid = (low + high) // 2
    if bit == 0:
        high = mid
    else:
        low = mid
    
    print_bounds(low, high)

# Recover plaintext m
m = int(high)
flag = long_to_bytes(m)
print("Recovered flag:", flag.decode(errors='ignore'))
